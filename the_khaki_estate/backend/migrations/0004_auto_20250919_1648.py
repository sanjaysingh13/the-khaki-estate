# Generated by Django 5.2.6 on 2025-09-19 16:48

from django.db import migrations


def populate_notification_types(apps, schema_editor):
    """
    Data migration to populate NotificationType table with notification types.
    This ensures notification types are available on all environments including production.
    """
    NotificationType = apps.get_model('backend', 'NotificationType')
    
    # Define notification types with their configuration
    # Format: (name, template_name, sms_template, default_delivery, is_urgent)
    notification_types_data = [
        # Maintenance-related notifications
        (
            'new_maintenance_request',
            'emails/maintenance_request_created.html',
            'New maintenance request #{ticket_number} has been submitted by {resident_name}.',
            'email',
            False
        ),
        (
            'maintenance_update',
            'emails/maintenance_request_updated.html',
            'Your maintenance request #{ticket_number} status has been updated to {status}.',
            'email',
            False
        ),
        (
            'urgent_maintenance_request',
            'emails/urgent_maintenance_request.html',
            'URGENT: Maintenance request #{ticket_number} requires immediate attention.',
            'both',
            True
        ),
        
        # Announcement-related notifications
        (
            'new_announcement',
            'emails/announcement_created.html',
            'New announcement: {title}',
            'email',
            False
        ),
        (
            'urgent_announcement',
            'emails/urgent_announcement.html',
            'URGENT ANNOUNCEMENT: {title}',
            'both',
            True
        ),
        
        # Event-related notifications
        (
            'event_reminder',
            'emails/event_reminder.html',
            'Reminder: {event_title} is scheduled for {event_date}.',
            'email',
            False
        ),
        (
            'event_cancelled',
            'emails/event_cancelled.html',
            'Event cancelled: {event_title} scheduled for {event_date}.',
            'both',
            True
        ),
        
        # Booking-related notifications
        (
            'booking_confirmed',
            'emails/booking_confirmed.html',
            'Your booking for {area_name} on {booking_date} has been confirmed.',
            'email',
            False
        ),
        (
            'booking_cancelled',
            'emails/booking_cancelled.html',
            'Your booking for {area_name} on {booking_date} has been cancelled.',
            'email',
            False
        ),
        
        # General system notifications
        (
            'welcome_message',
            'emails/welcome_message.html',
            'Welcome to The Khaki Estate community platform!',
            'email',
            False
        ),
        (
            'account_activated',
            'emails/account_activated.html',
            'Your account has been activated. Welcome to The Khaki Estate!',
            'email',
            False
        ),
    ]
    
    # Create notification types only if they don't exist
    for name, template_name, sms_template, default_delivery, is_urgent in notification_types_data:
        NotificationType.objects.get_or_create(
            name=name,
            defaults={
                'template_name': template_name,
                'sms_template': sms_template,
                'default_delivery': default_delivery,
                'is_urgent': is_urgent,
            }
        )


def reverse_populate_notification_types(apps, schema_editor):
    """
    Reverse migration to remove the populated notification types.
    This allows the migration to be reversed if needed.
    """
    NotificationType = apps.get_model('backend', 'NotificationType')
    
    # List of notification type names to remove during reverse migration
    notification_type_names = [
        'new_maintenance_request', 'maintenance_update', 'urgent_maintenance_request',
        'new_announcement', 'urgent_announcement', 'event_reminder', 'event_cancelled',
        'booking_confirmed', 'booking_cancelled', 'welcome_message', 'account_activated'
    ]
    
    # Remove notification types (only if they exist)
    NotificationType.objects.filter(name__in=notification_type_names).delete()


class Migration(migrations.Migration):
    """
    Data migration to populate NotificationType table.
    
    This migration automatically runs when 'python manage.py migrate' is executed,
    ensuring that notification types are available on all environments
    including production servers.
    """

    dependencies = [
        ('backend', '0003_auto_20250919_1443'),
    ]

    operations = [
        migrations.RunPython(
            populate_notification_types,
            reverse_populate_notification_types,
            hints={'target_db': 'default'}
        ),
    ]