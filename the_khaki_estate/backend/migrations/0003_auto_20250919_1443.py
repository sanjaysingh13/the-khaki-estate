# Generated by Django 5.2.6 on 2025-09-19 14:43

from django.db import migrations


def populate_maintenance_categories(apps, schema_editor):
    """
    Data migration to populate MaintenanceCategory table with representative categories.
    This ensures categories are available on all environments including production.
    """
    MaintenanceCategory = apps.get_model('backend', 'MaintenanceCategory')
    
    # Define comprehensive list of maintenance categories
    # Each category includes: name, priority_level, estimated_resolution_hours
    categories_data = [
        # EMERGENCY CATEGORIES (Priority 4) - Immediate response required
        ('Electrical Emergency', 4, 2),
        ('Plumbing Emergency', 4, 4),
        ('Gas Leak', 4, 1),
        ('Fire Safety', 4, 2),
        ('Security Breach', 4, 1),
        ('Structural Damage', 4, 6),
        
        # HIGH PRIORITY CATEGORIES (Priority 3) - Major issues
        ('Electrical Issues', 3, 8),
        ('Plumbing Issues', 3, 12),
        ('Air Conditioning', 3, 24),
        ('Heating System', 3, 24),
        ('Water Supply', 3, 12),
        ('Elevator Issues', 3, 24),
        ('Door/Window Issues', 3, 24),
        
        # MEDIUM PRIORITY CATEGORIES (Priority 2) - Standard maintenance
        ('Appliance Repair', 2, 48),
        ('Carpentry Work', 2, 72),
        ('Painting Work', 2, 96),
        ('Flooring Issues', 2, 72),
        ('Pest Control', 2, 24),
        ('Cleaning Services', 2, 8),
        ('Garden/Landscaping', 2, 48),
        ('Common Area Issues', 2, 48),
        ('Parking Issues', 2, 24),
        
        # LOW PRIORITY CATEGORIES (Priority 1) - Routine maintenance
        ('General Maintenance', 1, 168),  # 1 week
        ('Cosmetic Issues', 1, 120),
        ('Minor Repairs', 1, 72),
        ('Preventive Maintenance', 1, 168),
        ('Other', 1, 72),
    ]
    
    # Create categories only if they don't exist
    for name, priority_level, estimated_resolution_hours in categories_data:
        MaintenanceCategory.objects.get_or_create(
            name=name,
            defaults={
                'priority_level': priority_level,
                'estimated_resolution_hours': estimated_resolution_hours,
            }
        )


def reverse_populate_maintenance_categories(apps, schema_editor):
    """
    Reverse migration to remove the populated categories.
    This allows the migration to be reversed if needed.
    """
    MaintenanceCategory = apps.get_model('backend', 'MaintenanceCategory')
    
    # List of category names to remove during reverse migration
    category_names = [
        'Electrical Emergency', 'Plumbing Emergency', 'Gas Leak', 'Fire Safety',
        'Security Breach', 'Structural Damage', 'Electrical Issues', 'Plumbing Issues',
        'Air Conditioning', 'Heating System', 'Water Supply', 'Elevator Issues',
        'Door/Window Issues', 'Appliance Repair', 'Carpentry Work', 'Painting Work',
        'Flooring Issues', 'Pest Control', 'Cleaning Services', 'Garden/Landscaping',
        'Common Area Issues', 'Parking Issues', 'General Maintenance', 'Cosmetic Issues',
        'Minor Repairs', 'Preventive Maintenance', 'Other'
    ]
    
    # Remove categories (only if they exist)
    MaintenanceCategory.objects.filter(name__in=category_names).delete()


class Migration(migrations.Migration):
    """
    Data migration to populate MaintenanceCategory table.
    
    This migration automatically runs when 'python manage.py migrate' is executed,
    ensuring that maintenance categories are available on all environments
    including production servers.
    """

    dependencies = [
        ('backend', '0002_alter_maintenancerequest_options_and_more'),
    ]

    operations = [
        migrations.RunPython(
            populate_maintenance_categories,
            reverse_populate_maintenance_categories,
            hints={'target_db': 'default'}
        ),
    ]