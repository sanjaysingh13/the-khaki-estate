# Generated by Django 5.2.6 on 2025-09-21 05:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def add_booking_notification_types(apps, schema_editor):
    """
    Add booking-specific notification types for the approval workflow.
    
    This function adds notification types that support the new booking approval
    system where designated residents handle approvals instead of facility managers.
    """
    NotificationType = apps.get_model('backend', 'NotificationType')
    
    # Define new booking notification types
    booking_notification_types = [
        # Booking approval workflow notifications
        (
            'booking_pending_approval',
            'emails/booking_pending_approval.html',
            'New booking request #{booking_number} for {area_name} requires your approval.',
            'email',
            False
        ),
        (
            'booking_approved',
            'emails/booking_approved.html',
            'Your booking #{booking_number} for {area_name} has been approved.',
            'email',
            False
        ),
        (
            'booking_rejected',
            'emails/booking_rejected.html',
            'Your booking #{booking_number} for {area_name} has been rejected.',
            'email',
            False
        ),
        (
            'booking_approval_reminder',
            'emails/booking_approval_reminder.html',
            'REMINDER: Booking request #{booking_number} for {area_name} is pending your approval.',
            'email',
            False
        ),
        (
            'booking_status_change',
            'emails/booking_status_change.html',
            'Your booking #{booking_number} status has been updated to {status}.',
            'email',
            False
        ),
        (
            'booking_cancelled_by_resident',
            'emails/booking_cancelled_by_resident.html',
            'Booking #{booking_number} for {area_name} has been cancelled by the resident.',
            'email',
            False
        ),
        (
            'booking_updated',
            'emails/booking_updated.html',
            'Your booking #{booking_number} for {area_name} has been updated.',
            'email',
            False
        ),
    ]
    
    # Create notification types only if they don't exist
    for name, template, sms_template, delivery, is_urgent in booking_notification_types:
        NotificationType.objects.get_or_create(
            name=name,
            defaults={
                'template_name': template,
                'sms_template': sms_template,
                'default_delivery': delivery,
                'is_urgent': is_urgent,
            }
        )


def remove_booking_notification_types(apps, schema_editor):
    """
    Remove the booking notification types added by this migration.
    """
    NotificationType = apps.get_model('backend', 'NotificationType')
    
    booking_notification_names = [
        'booking_pending_approval',
        'booking_approved',
        'booking_rejected',
        'booking_approval_reminder',
        'booking_status_change',
        'booking_cancelled_by_resident',
        'booking_updated',
    ]
    
    NotificationType.objects.filter(name__in=booking_notification_names).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("backend", "0004_auto_20250919_1648"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="booking",
            name="approved_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="booking",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Resident who approved this booking",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="bookings_approved",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="designated_approver",
            field=models.ForeignKey(
                blank=True,
                help_text="Resident designated to approve bookings for this common area",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_bookings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="rejection_reason",
            field=models.TextField(
                blank=True, help_text="Reason for rejection if applicable"
            ),
        ),
        migrations.AddField(
            model_name="booking",
            name="status_changed_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="booking",
            name="status_changed_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who last changed the status",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="bookings_status_changed",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="booking",
            name="resident",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bookings",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="booking",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("approved", "Approved"),
                    ("confirmed", "Confirmed"),
                    ("cancelled", "Cancelled"),
                    ("completed", "Completed"),
                    ("rejected", "Rejected"),
                ],
                default="pending",
                max_length=10,
            ),
        ),
        # Add booking notification types
        migrations.RunPython(
            add_booking_notification_types,
            remove_booking_notification_types,
        ),
    ]
