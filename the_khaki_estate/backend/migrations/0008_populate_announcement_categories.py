# Generated by Django 5.2.6 on 2025-09-21 13:45

from django.db import migrations


def populate_announcement_categories(apps, schema_editor):
    """
    Populate announcement categories for housing complex management.
    
    Creates the following categories:
    - AGM: Annual General Meeting announcements (urgent, red)
    - Board Meeting: Board meeting notices (purple, formal)
    - Minutes Of Meeting: Meeting minutes and records (teal, informational)
    - CAM charges: Common Area Maintenance charges (yellow, financial)
    - Others: General announcements (gray, miscellaneous)
    """
    # Get the model class from the migration state
    AnnouncementCategory = apps.get_model("backend", "AnnouncementCategory")
    
    # Define announcement categories with appropriate styling and properties
    categories = [
        {
            "name": "AGM",
            "color_code": "#dc3545",  # Red - Important/Urgent meetings
            "icon": "fas fa-users",   # Users icon for assembly
            "is_urgent": True,        # AGM announcements are typically urgent
        },
        {
            "name": "Board Meeting", 
            "color_code": "#6f42c1",  # Purple - Official/Formal
            "icon": "fas fa-handshake", # Handshake for board decisions
            "is_urgent": False,       # Board meetings are scheduled, not urgent
        },
        {
            "name": "Minutes Of Meeting",
            "color_code": "#17a2b8",  # Teal - Information/Documentation
            "icon": "fas fa-file-alt", # Document icon for minutes
            "is_urgent": False,       # Minutes are informational
        },
        {
            "name": "CAM charges",
            "color_code": "#ffc107",  # Yellow/Warning - Financial matters
            "icon": "fas fa-dollar-sign", # Money icon for charges
            "is_urgent": False,       # Regular billing notifications
        },
        {
            "name": "Others",
            "color_code": "#6c757d",  # Gray - General/Miscellaneous  
            "icon": "fas fa-info-circle", # Info icon for general items
            "is_urgent": False,       # General announcements
        },
    ]
    
    # Create announcement categories
    for category_data in categories:
        # Use get_or_create to prevent duplicates if migration is run multiple times
        AnnouncementCategory.objects.get_or_create(
            name=category_data["name"],
            defaults={
                "color_code": category_data["color_code"],
                "icon": category_data["icon"], 
                "is_urgent": category_data["is_urgent"],
            },
        )


def reverse_populate_announcement_categories(apps, schema_editor):
    """
    Reverse migration function to remove announcement categories.
    This allows the migration to be rolled back if needed.
    """
    AnnouncementCategory = apps.get_model("backend", "AnnouncementCategory")
    
    # Remove the specific categories created by this migration
    category_names = ["AGM", "Board Meeting", "Minutes Of Meeting", "CAM charges", "Others"]
    AnnouncementCategory.objects.filter(name__in=category_names).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("backend", "0007_auto_20250921_1135"),
    ]

    operations = [
        migrations.RunPython(
            populate_announcement_categories,
            reverse_populate_announcement_categories,
        ),
    ]
