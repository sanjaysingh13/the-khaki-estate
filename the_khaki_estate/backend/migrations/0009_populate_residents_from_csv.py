# Generated by Django 4.2.7 on 2025-01-XX XX:XX

from django.db import migrations


def populate_residents_from_csv(apps, schema_editor):
    """
    Data migration to populate residents from CSV file.
    
    This migration runs the management command to create Resident profiles
    from the flat owners CSV file. It handles:
    - Creating User accounts for each flat owner
    - Creating Resident profiles with proper data formatting
    - Setting default values for new residents
    """
    from django.core.management import call_command
    from django.conf import settings
    import os
    
    # Path to the CSV file
    csv_file_path = os.path.join(settings.BASE_DIR, 'data', 'List of Total Flat Owners Khaki Estate.csv')
    
    # Check if CSV file exists
    if os.path.exists(csv_file_path):
        try:
            # Run the management command
            call_command('populate_residents_from_csv', csv_file_path, '--skip-existing')
            print("Successfully populated residents from CSV file")
        except Exception as e:
            print(f"Error populating residents from CSV: {e}")
            # Don't raise the exception to avoid breaking migrations
    else:
        print(f"CSV file not found at {csv_file_path}, skipping population")


def reverse_populate_residents(apps, schema_editor):
    """
    Reverse migration - remove residents created from CSV.
    
    This removes all residents with flat numbers that match the CSV format
    and were created by the population command.
    """
    from django.contrib.auth import get_user_model
    
    User = get_user_model()
    
    # Get all residents with flat numbers in the expected format
    # This targets residents created from the CSV (owners with specific flat formats)
    residents_to_remove = []
    
    try:
        from the_khaki_estate.backend.models import Resident
        
        # Find residents that match CSV patterns (A-101, B-102, etc.)
        csv_residents = Resident.objects.filter(
            resident_type='owner',
            flat_number__regex=r'^[A-E]-\d{3}$'
        )
        
        for resident in csv_residents:
            residents_to_remove.append(resident.user)
        
        # Delete the users (this will cascade to residents)
        for user in residents_to_remove:
            user.delete()
            
        print(f"Removed {len(residents_to_remove)} residents created from CSV")
        
    except Exception as e:
        print(f"Error removing CSV residents: {e}")
        # Don't raise to avoid breaking migrations


class Migration(migrations.Migration):
    """
    Migration to populate residents from CSV file.
    
    This migration runs the populate_residents_from_csv management command
    to create User and Resident records from the flat owners CSV data.
    """

    dependencies = [
        ('backend', '0008_populate_announcement_categories'),
    ]

    operations = [
        migrations.RunPython(
            populate_residents_from_csv,
            reverse_populate_residents,
        ),
    ]
